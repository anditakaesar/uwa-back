// Code generated by mockery v2.10.6. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	zapcore "go.uber.org/zap/zapcore"
)

// LoggerInterface is an autogenerated mock type for the LoggerInterface type
type LoggerInterface struct {
	mock.Mock
}

// Error provides a mock function with given fields: _a0, _a1, _a2
func (_m *LoggerInterface) Error(_a0 string, _a1 error, _a2 ...zapcore.Field) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Flush provides a mock function with given fields:
func (_m *LoggerInterface) Flush() {
	_m.Called()
}

// Info provides a mock function with given fields: _a0, _a1
func (_m *LoggerInterface) Info(_a0 string, _a1 ...zapcore.Field) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Warning provides a mock function with given fields: _a0, _a1
func (_m *LoggerInterface) Warning(_a0 string, _a1 ...zapcore.Field) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}
