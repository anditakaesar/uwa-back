// Code generated by mockery v2.10.6. DO NOT EDIT.

package mocks

import (
	domain "github.com/anditakaesar/uwa-back/domain"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// DBInterface is an autogenerated mock type for the DBInterface type
type DBInterface struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *DBInterface) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRole provides a mock function with given fields: role
func (_m *DBInterface) CreateRole(role *domain.Role) {
	_m.Called(role)
}

// CreateUser provides a mock function with given fields: user
func (_m *DBInterface) CreateUser(user *domain.User) {
	_m.Called(user)
}

// CreateUserRole provides a mock function with given fields: userRole
func (_m *DBInterface) CreateUserRole(userRole *domain.UserRole) {
	_m.Called(userRole)
}

// GetConnectedDB provides a mock function with given fields:
func (_m *DBInterface) GetConnectedDB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GetOrCreateUserCredential provides a mock function with given fields: userCredential, timeNow
func (_m *DBInterface) GetOrCreateUserCredential(userCredential *domain.UserCredential, timeNow *time.Time) *domain.UserCredential {
	ret := _m.Called(userCredential, timeNow)

	var r0 *domain.UserCredential
	if rf, ok := ret.Get(0).(func(*domain.UserCredential, *time.Time) *domain.UserCredential); ok {
		r0 = rf(userCredential, timeNow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserCredential)
		}
	}

	return r0
}

// GetRoleByName provides a mock function with given fields: roleName
func (_m *DBInterface) GetRoleByName(roleName string) *domain.Role {
	ret := _m.Called(roleName)

	var r0 *domain.Role
	if rf, ok := ret.Get(0).(func(string) *domain.Role); ok {
		r0 = rf(roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Role)
		}
	}

	return r0
}

// GetUser provides a mock function with given fields: paging
func (_m *DBInterface) GetUser(paging *domain.Paging) []domain.User {
	ret := _m.Called(paging)

	var r0 []domain.User
	if rf, ok := ret.Get(0).(func(*domain.Paging) []domain.User); ok {
		r0 = rf(paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	return r0
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *DBInterface) GetUserByUsername(username string) *domain.User {
	ret := _m.Called(username)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	return r0
}

// GetUserCredentialByToken provides a mock function with given fields: userToken
func (_m *DBInterface) GetUserCredentialByToken(userToken string) *domain.UserCredential {
	ret := _m.Called(userToken)

	var r0 *domain.UserCredential
	if rf, ok := ret.Get(0).(func(string) *domain.UserCredential); ok {
		r0 = rf(userToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserCredential)
		}
	}

	return r0
}

// UpdateUserCredential provides a mock function with given fields: userCredential
func (_m *DBInterface) UpdateUserCredential(userCredential *domain.UserCredential) {
	_m.Called(userCredential)
}
